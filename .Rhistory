SetNodeStyle(node,
label = function(node) paste0(node$splitname),
tooltip = function(node) paste0(nrow(node$data), " observations"),
fontname = "Roboto",
shape = "diamond",
style = "filled",
color=color_node,
fillcolor=paste(color_node,"88",sep=""),
fontcolor="black"))
print(color_node)
}
SetEdgeStyle(treeNode,
arrowhead = "none",
label = function(node) node$splitLevel,
fontname = "Roboto",
penwidth = function(node) 12 * nrow(node$data)/nrow(node$root$data),  )
Do(treeNode$leaves, function(node) SetNodeStyle(node, shape = "box"))
plot(treeNode)
SetNodeStyle(treeNode$leaves, shape = "box")
levels <- max(treeNode$Get(function(x) c(level = x$level)))
# bucle
for (i in 1:levels){
color_node <- colors[(i%%length(colors))+1]
nodes_level <- Traverse(treeNode, filterFun = function(x) x$level == i)
Do(nodes_level, function(node)
SetNodeStyle(node,
label = function(node) paste0(node$splitname),
tooltip = function(node) paste0(nrow(node$data), " observations"),
fontname = "Roboto",
shape = "diamond",
style = "filled",
color=color_node,
fillcolor=paste(color_node,"88",sep=""),
fontcolor="black"))
print(color_node)
}
SetEdgeStyle(treeNode,
arrowhead = "none",
label = function(node) node$splitLevel,
fontname = "Roboto",
penwidth = function(node) 12 * nrow(node$data)/nrow(node$root$data),  )
plot(treeNode)
SetNodeStyle(treeNode$leaves, shape = "box")
plot(treeNode)
source("C:/Users/ksada/OneDrive - Tecnun/interpretable-ai-review/Code_Analysis/XAIfunctions_NV_new.R")
# bucle
for (i in 1:levels){
color_node <- colors[(i%%length(colors))+1]
nodes_level <- Traverse(treeNode, filterFun = function(x) x$level == i)
Do(nodes_level, function(node)
SetNodeStyle(node,
label = function(node) paste0(node$splitname),
tooltip = function(node) paste0(nrow(node$data), " observations"),
fontname = "Roboto",
shape = "diamond",
style = "filled",
color=color_node,
fillcolor=paste(color_node,"88",sep=""),
fontcolor="black"))
}
SetEdgeStyle(treeNode,
arrowhead = "none",
label = function(node) node$splitLevel,
fontname = "Roboto",
penwidth = function(node) 12 * nrow(node$data)/nrow(node$root$data),  )
Do(treeNode$leaves, function(node) SetNodeStyle(node, shape = "box", inherit = FALSE))
plot(treeNode)
treeNode <- as.Node(tree)
colors <- c("","#367592", "#39A7AE", "#96D6B6", "#FDE5B0", "#F3908B", "#E36192", "#8E4884","#A83333")
levels <- max(treeNode$Get(function(x) c(level = x$level)))
# bucle
for (i in 1:levels){
color_node <- colors[(i%%length(colors))+1]
nodes_level <- Traverse(treeNode, filterFun = function(x) x$level == i)
Do(nodes_level, function(node)
SetNodeStyle(node,
label = function(node) paste0(node$splitname),
tooltip = function(node) paste0(nrow(node$data), " observations"),
fontname = "Roboto",
shape = "diamond",
style = "filled",
color=color_node,
fillcolor=paste(color_node,"88",sep=""),
fontcolor="black",  inherit = FALSE))
}
SetEdgeStyle(treeNode,
arrowhead = "none",
label = function(node) node$splitLevel,
fontname = "Roboto",
penwidth = function(node) 12 * nrow(node$data)/nrow(node$root$data),  )
Do(treeNode$leaves, function(node) SetNodeStyle(node, shape = "box", inherit = FALSE))
plot(treeNode)
levels <- max(treeNode$Get(function(x) c(level = x$level)))
# bucle
for (i in 1:levels){
color_node <- colors[(i%%length(colors))+1]
nodes_level <- Traverse(treeNode, filterFun = function(x) x$level == i)
Do(nodes_level, function(node)
SetNodeStyle(node,
label = function(node) paste0(node$splitname),
tooltip = function(node) paste0(nrow(node$data), " observations"),
fontname = "Roboto",
shape = "diamond",
style = "filled",
color=color_node,
fillcolor=paste(color_node,"88",sep=""),
fontcolor="black",  inherit = FALSE))
}
SetEdgeStyle(treeNode,
arrowhead = "none",
label = function(node) node$splitLevel,
fontname = "Roboto",
penwidth = function(node) 12 * nrow(node$data)/nrow(node$root$data),  )
plot(treeNode)
Do(treeNode$leaves, function(node) SetNodeStyle(node, shape = "box"))
plot(treeNode)
levels <- max(treeNode$Get(function(x) c(level = x$level)))
# bucle
for (i in 1:levels){
color_node <- colors[(i%%length(colors))+1]
nodes_level <- Traverse(treeNode, filterFun = function(x) x$level == i)
Do(nodes_level, function(node)
SetNodeStyle(node,
label = function(node) paste0(node$splitname),
tooltip = function(node) paste0(nrow(node$data), " observations"),
fontname = "Roboto",
shape = "diamond",
style = "filled",
color=color_node,
fillcolor=paste(color_node,"88",sep=""),
fontcolor="black",  inherit = FALSE))
}
SetEdgeStyle(treeNode,
arrowhead = "none",
label = function(node) node$splitLevel,
fontname = "Roboto",
penwidth = function(node) 12 * nrow(node$data)/nrow(node$root$data),  )
Do(treeNode$leaves, function(node) SetNodeStyle(node, shape = "box",inherit = T))
plot(treeNode)
levels <- max(treeNode$Get(function(x) c(level = x$level)))
# bucle
for (i in 1:levels){
color_node <- colors[(i%%length(colors))+1]
nodes_level <- Traverse(treeNode, filterFun = function(x) x$level == i)
Do(nodes_level, function(node)
SetNodeStyle(node,
label = function(node) paste0(node$splitname),
tooltip = function(node) paste0(nrow(node$data), " observations"),
fontname = "Roboto",
shape = "diamond",
style = "filled",
color=color_node,
fillcolor=paste(color_node,"88",sep=""),
fontcolor="black",  inherit = FALSE))
}
SetEdgeStyle(treeNode,
arrowhead = "none",
label = function(node) node$splitLevel,
fontname = "Roboto",
penwidth = function(node) 12 * nrow(node$data)/nrow(node$root$data),  )
Do(treeNode$leaves, function(node) SetNodeStyle(node, shape = "box",inherit = F))
plot(treeNode)
colors <- c("","#367592", "#39A7AE", "#96D6B6", "#FDE5B0", "#F3908B", "#E36192", "#8E4884","#A83333")
levels <- max(treeNode$Get(function(x) c(level = x$level)))
# bucle
for (i in 1:levels){
color_node <- colors[(i%%length(colors))+1]
nodes_level <- Traverse(treeNode, filterFun = function(x) x$level == i)
Do(nodes_level, function(node)
SetNodeStyle(node,
label = function(node) paste0(node$splitname),
tooltip = function(node) paste0(nrow(node$data), " observations"),
fontname = "Roboto",
shape = "diamond",
style = "filled",
color=color_node,
fillcolor=paste(color_node,"88",sep=""),
fontcolor="black",  inherit = FALSE))
}
SetEdgeStyle(treeNode,
arrowhead = "none",
label = function(node) node$splitLevel,
fontname = "Roboto",
penwidth = function(node) 12 * nrow(node$data)/nrow(node$root$data),  )
Do(treeNode$leaves, function(node) SetNodeStyle(node, shape = "box"))
plot(treeNode)
levels <- max(treeNode$Get(function(x) c(level = x$level)))
# bucle
for (i in 1:levels){
color_node <- colors[(i%%length(colors))+1]
nodes_level <- Traverse(treeNode, filterFun = function(x) x$level == i)
Do(nodes_level, function(node)
SetNodeStyle(node,
label = function(node) paste0(node$splitname),
tooltip = function(node) paste0(nrow(node$data), " observations"),
fontname = "Roboto",
shape = "diamond",
style = "filled",
color=color_node,
fillcolor=paste(color_node,"88",sep=""),
fontcolor="black"))
}
SetEdgeStyle(treeNode,
arrowhead = "none",
label = function(node) node$splitLevel,
fontname = "Roboto",
penwidth = function(node) 12 * nrow(node$data)/nrow(node$root$data),  )
Do(treeNode$leaves, function(node) SetNodeStyle(node, shape = "box"))
plot(treeNode)
Do(treeNode$leaves, function(node) SetNodeStyle(node, shape = "box", inherit = F))
plot(treeNode)
Do(treeNode$leaves, function(node) SetNodeStyle(node, shape = "box", inherit = T))
plot(treeNode)
return(treeNode)
Do(treeNode$leaves, function(node) SetNodeStyle(node, shape = "box", inherit = T))
plot(treeNode)
levels <- max(treeNode$Get(function(x) c(level = x$level)))
# bucle
for (i in 1:levels){
color_node <- colors[(i%%length(colors))+1]
nodes_level <- Traverse(treeNode, filterFun = function(x) x$level == i)
Do(nodes_level, function(node)
SetNodeStyle(node,
label = function(node) paste0(node$splitname),
tooltip = function(node) paste0(nrow(node$data), " observations"),
fontname = "Roboto",
shape = "diamond",
style = "filled",
color=color_node,
fillcolor=paste(color_node,"88",sep=""),
fontcolor="black"))
}
SetEdgeStyle(treeNode,
arrowhead = "none",
label = function(node) node$splitLevel,
fontname = "Roboto",
penwidth = function(node) 12 * nrow(node$data)/nrow(node$root$data),  )
Do(treeNode$leaves, function(node) SetNodeStyle(node, shape = "box", inherit = T))
plot(treeNode)
levels <- max(treeNode$Get(function(x) c(level = x$level)))
# bucle
for (i in 1:levels){
color_node <- colors[(i%%length(colors))+1]
nodes_level <- Traverse(treeNode, filterFun = function(x) x$level == i)
Do(nodes_level, function(node)
SetNodeStyle(node,
label = function(node) paste0(node$splitname),
tooltip = function(node) paste0(nrow(node$data), " observations"),
fontname = "Roboto",
shape = "diamond",
style = "filled",
color=color_node,
fillcolor=paste(color_node,"88",sep=""),
fontcolor="black"))
}
SetEdgeStyle(treeNode,
arrowhead = "none",
label = function(node) node$splitLevel,
fontname = "Roboto",
penwidth = function(node) 12 * nrow(node$data)/nrow(node$root$data),  )
Do(treeNode$leaves, function(node) SetNodeStyle(node, shape = "box", inherit = F))
plot(treeNode)
source("C:/Users/ksada/OneDrive - Tecnun/interpretable-ai-review/Code_Analysis/XAIfunctions_NV_new.R")
ggsave(paste(folder_dir,"Rimages/graph.png",sep=""), plot(treeNode), width = 10, height = 6, dpi = 1000)
class(plot(treeNode))
tmp = DiagrammeRsvg::export_svg(treeNode)
install.packages("DiagrammeRsvg")
tmp = DiagrammeRsvg::export_svg(treeNode)
tmp = charToRaw(treeNode) # flatten
tmp = DiagrammeRsvg::export_svg(plot(treeNode))
tmp = charToRaw(tmp) # flatten
rsvg::rsvg_png(tmp, paste(folder_dir,"Rimages/graph.png",sep=""))
install.packages("rsvg")
tmp = DiagrammeRsvg::export_svg(plot(treeNode))
tmp = charToRaw(tmp) # flatten
rsvg::rsvg_png(tmp, paste(folder_dir,"Rimages/graph.png",sep=""))
source("C:/Users/ksada/OneDrive - Tecnun/interpretable-ai-review/Code_Analysis/XAIfunctions_NV_new.R")
folder=NULL
if (!is.null(folder)){
print(1)
}
is.null(folder)
source("C:/Users/ksada/OneDrive - Tecnun/interpretable-ai-review/Code_Analysis/XAIfunctions_NV_new.R")
source("C:/Users/ksada/OneDrive - Tecnun/interpretable-ai-review/Code_Analysis/XAIfunctions_NV_new.R")
source("C:/Users/ksada/OneDrive - Tecnun/interpretable-ai-review/Code_Analysis/XAIfunctions_NV_new.R")
folder <- paste(folder_dir,"Rimages",sep="")
source("C:/Users/ksada/OneDrive - Tecnun/interpretable-ai-review/Code_Analysis/XAIfunctions_NV_new.R")
source("C:/Users/ksada/OneDrive - Tecnun/interpretable-ai-review/Code_Analysis/XAIfunctions_NV_new.R")
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
treeNode <- as.Node(tree)
colors <- c("", "#367592", "#39A7AE", "#96D6B6", "#FDE5B0", "#F3908B", "#E36192", "#8E4884", "#A83333")
levels <- max(treeNode$Get(function(x) c(level = x$level)))
# bucle
for (i in 1:levels) {
color_node <- colors[(i %% length(colors)) + 1]
nodes_level <- Traverse(treeNode, filterFun = function(x) x$level == i)
Do(nodes_level, function(node) {
SetNodeStyle(node,
label = function(node) paste0(node$splitname),
tooltip = function(node) paste0(nrow(node$data), " observations"),
fontname = "Roboto",
shape = "diamond",
style = "filled",
color = color_node,
fillcolor = paste(color_node, "88", sep = ""),
fontcolor = "black"
)
})
}
SetEdgeStyle(treeNode,
arrowhead = "none",
label = function(node) node$splitLevel,
fontname = "Roboto",
penwidth = function(node) 12 * nrow(node$data) / nrow(node$root$data),
)
Do(treeNode$leaves, function(node) SetNodeStyle(node, shape = "box"))
plot(treeNode)
if (!is.null(folder)) {
# Save plot
tmp <- DiagrammeRsvg::export_svg(plot(treeNode))
tmp <- charToRaw(tmp) # flatten
rsvg::rsvg_png(tmp, paste(folder, "/tree_plot.png", sep = ""))
}
source("C:/Users/ksada/OneDrive - Tecnun/interpretable-ai-review/Code_Analysis/XAIfunctions_NV_new.R")
source("C:/Users/ksada/OneDrive - Tecnun/interpretable-ai-review/Code_Analysis/XAIfunctions_NV_new.R")
if (!is.null(folder)) {
# Save plot
tmp <- DiagrammeRsvg::export_svg(plot(treeNode))
tmp <- charToRaw(tmp) # flatten
rsvg::rsvg_png(tmp, paste(folder, "/tree_plot.png", sep = ""),quality = 300)
}
?export_svg
if (!is.null(folder)) {
# Save plot
tmp <- DiagrammeRsvg::export_svg(plot(treeNode), height =10)
tmp <- charToRaw(tmp) # flatten
rsvg::rsvg_png(tmp, paste(folder, "/tree_plot.png", sep = ""),quality = 300)
}
if (!is.null(folder)) {
# Save plot
tmp <- DiagrammeRsvg::export_svg(plot(treeNode))
tmp <- charToRaw(tmp) # flatten
rsvg::rsvg_png(tmp, paste(folder, "/tree_plot.png", sep = ""),height = 20)
}
if (!is.null(folder)) {
# Save plot
tmp <- DiagrammeRsvg::export_svg(plot(treeNode))
tmp <- charToRaw(tmp) # flatten
rsvg::rsvg_png(tmp, paste(folder, "/tree_plot.png", sep = ""),height = 500)
}
if (!is.null(folder)) {
# Save plot
tmp <- DiagrammeRsvg::export_svg(plot(treeNode))
tmp <- charToRaw(tmp) # flatten
rsvg::rsvg_png(tmp, paste(folder, "/tree_plot.png", sep = ""),height = 1000)
}
if (!is.null(folder)) {
# Save plot
tmp <- DiagrammeRsvg::export_svg(plot(treeNode))
tmp <- charToRaw(tmp) # flatten
rsvg::rsvg_png(tmp, paste(folder, "/tree_plot.png", sep = ""),height = 2000)
}
source("C:/Users/ksada/OneDrive - Tecnun/interpretable-ai-review/Code_Analysis/XAIfunctions_NV_new.R")
source("Code_Analysis/XAIfunctions_NV_new.R")
windowsFonts("Roboto" = windowsFont("Roboto"))
# Folder to save results
folder_dir <- "C:/Users/ksada/OneDrive - Tecnun/Paper XAI Methods/Rresults/"
# save(ODT, ODTSqrt, MnLasso,Lasso, BOSO, file = paste(folder_dir,"Rdata/expression_models.RData",sep=""))
# save(treatmentODTExp, treatmentODTSqrtExp, treatmentMnLassoExp, treatmentLassoExp, treatmentBOSOExp, file = paste(folder_dir,"Rdata/expression_results.RData",sep=""))
load(paste(folder_dir,"Rdata/expression_models.RData",sep=""))
folder <- paste(folder_dir,"Rimages",sep="")
niceTree(ODTSqrtMut_All,folder)
niceTree(ODTSqrt,folder)
################################################################################
# Variable Number
################################################################################
# Load models
load(paste(folder_dir, "Rdata/mutations_models_all.RData", sep = ""))
niceTree(ODTSqrtMut_All,folder)
source("C:/Users/ksada/OneDrive - Tecnun/interpretable-ai-review/Code_Analysis/XAIfunctions_NV_new.R")
load(paste(folder_dir, "Rdata/MOM_model_all.RData", sep = "")) # model
View(MOM_All)
MOM_All$TreatmentGuideline
MOM_All[["Patient-Distribution"]][["TreatmentName"]]
View(MOM_All$`Patient-Distribution`)
ODTSqrtMut_All
ODTSqrT
ODTSqrt
class(ODTSqrt)
data("WeatherPlay", package = "partykit")
force(WeatherPlay)
View(WeatherPlay)
View(MOM_All)
MOM_All[["TreatmentGuideline"]]
# MOM PLOT
GL <- MOM_All$TreatmentGuideline
selectedTreat <- kfold_validation_mut[,1,drop = FALSE] * NA
View(GL)
# MOM PLOT
GL <- MOM_All$TreatmentGuideline
selectedTreat <- kfold_validation_mut[,1,drop = FALSE] * NA
colnames(selectedTreat) <- "Treatment"
# MOM PLOT
GL <- MOM_All$TreatmentGuideline
colnames(selectedTreat) <- "Treatment"
# MOM PLOT
GL <- MOM_All$TreatmentGuideline
# MOM PLOT
GL <- MOM_All$TreatmentGuideline
for (s in nrow(GL)) {
selectedDrug <- unlist(strsplit(GL[s,2], split="_"))[1]
mut_step <- unlist(strsplit(GL[s,2], split="_"))[2]
status <- factor(unlist(strsplit(GL[s,2], split="_"))[3], levels = c("WT","Mut"))
}
selectedDrug
mut_step
status <- factor(unlist(strsplit(GL[s,2], split="_"))[3], levels = c("WT","Mut"))
status
# MOM PLOT
GL <- MOM_All$TreatmentGuideline
for (s in nrow(GL)) {
selectedDrug <- unlist(strsplit(GL[s,2], split="_"))[1]
mut_step <- unlist(strsplit(GL[s,2], split="_"))[2]
status <- factor(unlist(strsplit(GL[s,2], split="_"))[3], levels = c("WT","Mut"))
GL$Drug[s] <- selectedDrug
GL$Gene[s] <- mut_step
GL$Status[s] <- status
}
nrow(GL)
# MOM PLOT
GL <- MOM_All$TreatmentGuideline
for (s in 1:nrow(GL)) {
selectedDrug <- unlist(strsplit(GL[s,2], split="_"))[1]
mut_step <- unlist(strsplit(GL[s,2], split="_"))[2]
status <- factor(unlist(strsplit(GL[s,2], split="_"))[3], levels = c("WT","Mut"))
GL$Drug[s] <- selectedDrug
GL$Gene[s] <- mut_step
GL$Status[s] <- status
}
# MOM PLOT
GL <- MOM_All$TreatmentGuideline
for (s in 1:nrow(GL)) {
selectedDrug <- unlist(strsplit(GL[s,2], split="_"))[1]
mut_step <- unlist(strsplit(GL[s,2], split="_"))[2]
status <- unlist(strsplit(GL[s,2], split="_"))[3])
GL$Drug[s] <- selectedDrug
GL$Gene[s] <- mut_step
GL$Status[s] <- status
}
# MOM PLOT
GL <- MOM_All$TreatmentGuideline
for (s in 1:nrow(GL)) {
selectedDrug <- unlist(strsplit(GL[s,2], split="_"))[1]
mut_step <- unlist(strsplit(GL[s,2], split="_"))[2]
status <- unlist(strsplit(GL[s,2], split="_"))[3]
GL$Drug[s] <- selectedDrug
GL$Gene[s] <- mut_step
GL$Status[s] <- status
}
class(plot(ODT))
class(plot(ODT))
type(plot(ODT))
tmp
DiagrammeRsvg::export_svg(plot(treeNode))
DiagrammeRsvg::export_svg(plot(treeNode))
class(ODT)
ODT
?party
# save(treatmentODTMut_w34, treatmentODTSqrtMut_w34, treatmentMnLassoMut_w34, treatmentLassoMut_w34, treatmentBOSOMut_w34, file = paste(folder_dir,"Rdata/mutations_results_test.RData",sep=""))
# save(ODTMut_All, ODTSqrtMut_All, MnLassoMut_All, LassoMut_All,BOSOMut_All, file = paste(folder_dir,"Rdata/mutations_models_all.RData",sep=""))
load(paste(folder_dir,"Rdata/mutations_results_test.RData",sep=""))
load(paste(folder_dir,"Rdata/mutations_models_all.RData",sep=""))
load(paste(folder_dir,"Rdata/MOM_model_all.RData",sep="")) # model
load(paste(folder_dir,"Rdata/MOM_results_test.RData",sep="")) # predictions
# KRL
treatmentKRL_w34 <- read_csv("data/output/KRL_results_w34_BeatAML2.csv")
# Loading Libraries and Packages --------------------------------------------
#The first part is to load all the libraries and external functions that are required for the analysis. # nolint # nolint
library(readxl)
library(RColorBrewer)
library(matrixStats)
library(partykit)
library(glmnet)
library(BOSO)
source("Code_Analysis/XAIfunctions_NV_new.R")
library(impute)
library(knitr)
library(reticulate)
library(readr)
library(limma)
library(ggplot2)
library(ggpattern)
library(ggpubr)
library(ggsci)
library(matrixStats)
library(maftools)
library(qvalue)
library(tibble)
library(Rtsne)
library(IHW)
library(matrixStats)
library(pheatmap)
library(DT)
library("dplyr")
library(tictoc)
windowsFonts("Roboto" = windowsFont("Roboto"))
# Folder to save results
folder_dir <- "C:/Users/ksada/OneDrive - Tecnun/Paper XAI Methods/Rresults/"
# KRL
treatmentKRL_w34 <- read_csv("data/output/KRL_results_w34_BeatAML2.csv")
