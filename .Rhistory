dODTMut<-Guideline_ODTMut[i]
if(dODTMut %in% colnames(GDSC_AML)){
GDSC_IC50$ODTMut[i]<-GDSC_AML[CL,dODTMut]
}
# ODTSqrtMut
dODTSqrtMut<-Guideline_ODTSqrtMut[i]
if(dODTSqrtMut %in% colnames(GDSC_AML)){
GDSC_IC50$ODTSqrtMut[i]<-GDSC_AML[CL,dODTSqrtMut]
}
# Lasso
dLasso<-Guideline_Lasso[i]
if(dLasso %in% colnames(GDSC_AML)){
GDSC_IC50$LassoMut[i]<-GDSC_AML[CL,dLasso]
}
# Multinomial
dMultinomial<-Guideline_Multinomial[i]
if(dMultinomial %in% colnames(GDSC_AML)){
GDSC_IC50$MnLassoMut[i]<-GDSC_AML[CL,dMultinomial]
}
# BOSO
dBOSO<-Guideline_BOSO[i]
if(dBOSO %in% colnames(GDSC_AML)){
GDSC_IC50$BOSOMut[i]<-GDSC_AML[CL,dBOSO]
}
#MOM
dMOM<-Guideline_MOM[i]
if(dMOM %in% colnames(GDSC_AML)){
GDSC_IC50$MOM[i]<-GDSC_AML[CL,dMOM]
}
#KRL
dKRL<-Guideline_KRL[i]
if(dKRL %in% colnames(GDSC_AML)){
GDSC_IC50$KRL[i]<-GDSC_AML[CL,dKRL]
}
#ORACLE
Guideline_ORACLE[i] <- names(which(GDSC_AML[CL,] == min(GDSC_AML[CL,])))
GDSC_IC50$ORACLE[i]<-min(GDSC_AML[CL,])
}
rownames(GDSC_IC50)<-GDSC_IC50$CL
# Plotting GDSC Validation
number_methods <- ncol(GDSC_IC50)-1
Validation_plot<-data.frame(
Dataset=rep("GDSC", nrow(GDSC_IC50)*(number_methods)),
CellLine=rep(rownames(GDSC_IC50),number_methods),
Method=rep(colnames(GDSC_IC50[,-1]), each=nrow(GDSC_IC50)),
IC50=unlist(GDSC_IC50[,-1]))
rownames(Validation_plot)<-1:nrow(Validation_plot)
mycomparisons<-combn(unique(Validation_plot$Method),2)
mycomparisons<-as.list(data.frame(mycomparisons))
mycomparisons<-mycomparisons[-grep("ORACLE",mycomparisons)]
Plotting<-Validation_plot[Validation_plot$Dataset=="GDSC",]
library(ggsci)
Plotting$Method<-factor(Plotting$Method, levels=c("ORACLE", "MOM","KRL", "BOSOMut", "ODTMut", "ODTSqrtMut", "LassoMut", "MnLassoMut"))
treatment_plot_violin <- ggplot(Plotting, aes(x = Method, y = IC50, fill = Method)) +
geom_violin(lwd = 0.8, position = position_dodge(0.8)) +
theme_bw() +
scale_fill_manual(values = colors) +
ylab("GDSC IC50") +
ggtitle("Test in GDSC (mutations)") +
theme(text = element_text(family = "Roboto"),
axis.text.x = element_text(size = 18, angle=60,vjust=0.65),
axis.text.y = element_text(size = 14),
axis.title = element_text(size = 21),
plot.title = element_text(size = 26, face = "bold"),
plot.background = element_rect(fill = "transparent", size = 0, color = "transparent"),
panel.background = element_rect(fill = "transparent"),
)
treatment_plot_violin
ggsave(paste(folder_dir,"/images/violin_mutations_GDSC.png",sep=""), treatment_plot_violin, width = 8, height = 7, dpi = 1000)
colors <- c("#A83333","#367592", "#39A7AE", "#96D6B6", "#FDE5B0", "#F3908B", "#E36192", "#8E4884")
g2_gdsc <- ggplot(Plotting, aes(x = Method, y = IC50, fill = Method)) +
geom_boxplot(lwd = 0.8, position = position_dodge(0.8)) +
theme_bw() +
scale_fill_manual(values = colors) +
ylab("GDSC IC50") +
ggtitle("Test in GDSC (mutations)") +
theme(text = element_text(family = "Roboto"),
axis.text.x = element_text(size = 24, angle=60,vjust=0.65),
axis.text.y = element_text(size = 20),
axis.title = element_text(size = 27),
plot.title = element_text(size = 32, face = "bold"),
plot.background = element_rect(fill = "transparent", size = 0, color = "transparent"),
panel.background = element_rect(fill = "transparent"),
legend.position = "NULL")
g2_gdsc
ggsave(paste(folder_dir,"/images/boxplot_mutations_GDSC.png",sep=""), g2_gdsc, width = 8, height = 7, dpi = 1000)
lapply(unique(Plotting$Method), function(method){
return(c(as.character(method),median(na.omit(Plotting$IC50[Plotting$Method==method]))))
})
wilcox.test(Plotting$IC50[Plotting$Method=="ODTSqrtMut"],
Plotting$IC50[Plotting$Method=="ODTMut"], alternative="less")
# Intragroup Validation in GDSC
Validation_GDSC<-data.frame(patients=rep(rownames(GDSC_AML),number_methods),
drug=c(
Guideline_ODTMut,
Guideline_ODTSqrtMut,
Guideline_Lasso,
Guideline_Multinomial,
Guideline_BOSO,
Guideline_MOM,
Guideline_KRL,
Guideline_ORACLE
),
IC50=c(
GDSC_IC50$ODTMut,
GDSC_IC50$ODTSqrtMut,
GDSC_IC50$LassoMut,
GDSC_IC50$MnLassoMut,
GDSC_IC50$BOSOMut,
GDSC_IC50$MOM,
GDSC_IC50$KRL,
GDSC_IC50$ORACLE
),
Method=rep(unique(Validation_plot$Method), each=nrow(GDSC_AML)))
colors2 <-  c("#FDE5B0", "#F3908B", "#E36192", "#8E4884", "#96D6B6", "#367592","#39A7AE")
methods <- unique(Validation_GDSC$Method)[-8]
n <- 5
gg_drug_plots <- plotIntragroup(methods[n],colors2[n],Validation_GDSC,GDSC_AML,"GDSC")
gg_drug_plots
for (n in 1:length(methods)) {
gg_drug_plots <- plotIntragroup(methods[n],colors2[n],Validation_GDSC,GDSC_AML,"GDSC")
}
chosen_method <- methods[n]
color <- colors2[n]
Validation_Beat <- Validation_GDSC
drug_response <- GDSC_AML
dataset<- "GDSC"
library(reticulate)
use_python("C:/Users/ksada/Anaconda3/envs/AML_Patients_PHD/python.exe")
library(impute)
library(knitr)
library(reticulate)
library(readxl)
library(readr)
library(limma)
library(ggplot2)
library(ggpubr)
library(matrixStats)
library(maftools)
library(qvalue)
library(tibble)
library(Rtsne)
library(IHW)
library(matrixStats)
library(pheatmap)
library(DT)
library("dplyr")
library(tictoc)
source("./MOM/MOM_source_Functions.R")
# Folder to save results
folder_dir <- "./data/output"
# Loading Data --------------------------------------------
# Load clinical data
clinical <- read_excel("./data/input/BeatAML2/beataml_wv1to4_clinical.xlsx",
sheet = "summary"
)
clinical$dbgap_subject_id <- as.character(clinical$dbgap_subject_id)
# keep only first specimen collected of each subject
clinical <- clinical[!clinical$timeOfSampleCollectionRelativeToInclusion>0,]
# keep subjects that have dna and rna
clinical <- clinical[complete.cases(clinical[, c("dbgap_dnaseq_sample", "dbgap_rnaseq_sample")]),]
# make sure no samples are duplicated: keep only one rna and dna sample per subject (some have more)
sum(duplicated(clinical$dbgap_subject_id)) # no samples are duplicated
# clinical <- clinical[!duplicated(clinical$dbgap_subject_id),]
clinical <- as.data.frame(clinical)
rownames(clinical) <- clinical$dbgap_subject_id
# Load gene expression data
expression <- read_excel("./data/input/BeatAML2/beataml_waves1to4_norm_exp_dbgap.xlsx")
expression <- as.data.frame(expression)
# set symbols as row names
rownames(expression) <- expression$display_label
# set dbgap_subject_id as colnames
rna_ids <- clinical$dbgap_rnaseq_sample[clinical$dbgap_rnaseq_sample  %in% colnames(expression)]
expression <- expression[,rna_ids]
subject_ids <-na.omit(clinical$dbgap_subject_id[match(colnames(expression),clinical$dbgap_rnaseq_sample)])
colnames(expression) <- subject_ids
# Load mutations data
gene_variants <- read_excel("./data/input/BeatAML2/beataml_wes_wv1to4_mutations_dbgap.xlsx")
colnames(gene_variants)[1]="dbgap_dnaseq_sample"
# add dbgap_subject_id and keep only samples in clinical (have also dna)
gene_variants <-merge(gene_variants,clinical[,c("dbgap_subject_id","dbgap_dnaseq_sample")], by="dbgap_dnaseq_sample")
# Load drug sensitivity data
drug_response <- read_excel("./data/input/BeatAML2/beataml_probit_curve_fits_v4_dbgap.xlsx")
drug_response$dbgap_subject_id <- as.character(drug_response$dbgap_subject_id)
# DRUG RESPONSE MATRIX
drug_names <- unique(drug_response$inhibitor)
subjects_ids <- clinical$dbgap_subject_id
# Build Drug Matrix
drug_matrix <- matrix( # empty matrix
data = "NA", nrow = length(drug_names),
ncol = length(subjects_ids)
)
colnames(drug_matrix) <- subjects_ids # columns are subjects
rownames(drug_matrix) <- drug_names # rows are drugs
for (subject in subjects_ids) { # add the ic50
inds_subject <- which(drug_response$dbgap_subject_id == subject) # get indices of subject
drugs <- as.character(drug_response$inhibitor[inds_subject]) # get drug names of subject
drug_matrix[drugs, subject] <- drug_response$ic50[inds_subject] # add ic50 of those drugs
}
# Identifying missing values
is.na(drug_matrix) <- drug_matrix == "NA"
# Change IC50 format to numeric
for (i in 2:(dim(drug_matrix)[2] - 1)) {
drug_matrix[, i] <- as.numeric(drug_matrix[, i])
}
# Delete patients with few drug response and input missing drug response
drug_matrix_2<-as.matrix(t(drug_matrix)) # transpose drug
if (sum(is.na(drug_matrix_2)) > 0) {
drug_matrix_3 <- drug_matrix_2[
# NAs percentage has to be less than 20% in rows and less than 30% in columns
-which((rowSums(is.na(drug_matrix_2)) / dim(drug_matrix_2)[2]) > 0.8), # delete those tested in a few drugs,
-which((colSums(is.na(drug_matrix_2)) / dim(drug_matrix_2)[1]) > 0.7)]
out <- impute.knn(as.matrix(drug_matrix_3), # impute missing values
k = 10, rowmax = 0.8,
colmax = 0.75, maxp = 1500, rng.seed = 362436069
)
drug_matrix_4 <- out$data[, -which(colnames(out$data) %in% c("Elesclomol", "JNJ-7706621"))] # Los quitamos por ser toxicos, no los queremos, cuando hicimos la normalizacion se deberian de haber ido solitos
} else {
drug_matrix_4 <- drug_matrix_2[, -which(colnames(drug_matrix_2) %in% c("Elesclomol", "JNJ-7706621"))]
}
# MUTATIONS MATRIX
# Build Mutations matrix
mutations <- matrix(0, # empty matrix
nrow = length(subjects_ids),
ncol = length(unique(gene_variants$symbol))
)
rownames(mutations) <- subjects_ids
colnames(mutations) <-unique(gene_variants$symbol)
for (i in as.character(unique(gene_variants$dbgap_subject_id))) {
jj <- unique(gene_variants$symbol[which(gene_variants$dbgap_subject_id == i)])
mutations[i, jj] <- 1 # add 1 if there is a mutation
}
# Add Translocations
# look for translocations:  filtering the rows to only those that contain "AML with inv" or "AML with t"
translocations_clinical<-clinical[,c("dbgap_subject_id","specificDxAtAcquisition")][grep("AML with inv", clinical$specificDxAtAcquisition),]
translocations_clinical<-rbind(translocations_clinical,clinical[,c("dbgap_subject_id","specificDxAtAcquisition")][grep("AML with t", clinical$specificDxAtAcquisition),])
trans<-as.character(unique(translocations_clinical$specificDxAtAcquisition))
trans_matrix<-matrix(0, nrow=nrow(mutations), ncol=length(trans)) # add columns for translocations
colnames(trans_matrix)<-trans
rownames(trans_matrix)<-rownames(mutations)
for(j in colnames(trans_matrix)){
p<-as.character(translocations_clinical$dbgap_subject_id[which(translocations_clinical$specificDxAtAcquisition ==j)])
p<-p[which(p %in% rownames(trans_matrix))]
trans_matrix[p,j]<-1 # add 1 if there is a translocation
}
# Change column name and also add t: extract the second element of each translocation name (i.e., the specific type of translocation) and use it as the new column name in add.
trans<-sapply(trans, function(X){unlist(strsplit(X, split = "; "))[2]})
colnames(trans_matrix)<-trans
mutations<-cbind(mutations,trans_matrix)
mutations<-as.matrix(mutations)
# Keep only samples in the 4 matrices (gene_variants,expression,drug_response,clinical)
drug_subjects <- rownames(drug_matrix_4)
mutation_subjects <- rownames(mutations)
expression_subjects <- colnames(expression)
clinical_subjects <- clinical$dbgap_subject_id
keep_subjects <- Reduce(intersect, list(drug_subjects,mutation_subjects,expression_subjects,clinical_subjects))
drug_matrix_4 <- drug_matrix_4[keep_subjects,]
mutations <- mutations[keep_subjects,]
expression <- expression[,keep_subjects]
clinical <- clinical[keep_subjects,]
table(clinical$cohort)
# IC50* Calculation
drug<-log10(drug_matrix_4)-1
drug <- t(t(drug) - colMeans(drug, na.rm=T))  # unificar los farmacos por columnas, compensamos con la dosis
drug_response_matrix_MOM<-drug-max(drug,na.rm = T)  # MOM minimiza en vez de maximizar
# Separate variables into train and test (Waves 1+2 or Both and Waves 3+4) REVISAR
# get ids of subjects
subject_id_w12 <- as.character(clinical$dbgap_subject_id[which(clinical$cohort=="Waves1+2" | clinical$cohort=="Both")])
subject_id_w34 <- as.character(clinical$dbgap_subject_id[which(clinical$cohort=="Waves3+4")])
drug_response_w12 <- drug_response_matrix_MOM[subject_id_w12,]
drug_response_w34 <- drug_response_matrix_MOM[subject_id_w34,]
keep_mut <- (colSums(mutations[subject_id_w34,]) > 0) & (colSums(mutations[subject_id_w12,]) > 0) & colSums(mutations)>0.01*nrow(mutations)
mutations<-mutations[, keep_mut]
mutations_w12 <- mutations[subject_id_w12,]
mutations_w34 <- mutations[subject_id_w34,]
# Tidying up the variables (delete extra variables)
rm(list = c("drug","drug_matrix_2", "drug_matrix_3", "drug_matrix_4", "drug_response", "gene_variants"))
rm(list = c("p","j","out", "translocations_clinical", "trans_matrix", "drug_matrix","i","jj"))
patient_names<-rownames(drug_response_matrix_MOM)
patient_names<-cbind(patient_names, kfold=sample(1:5,length(patient_names), replace=TRUE))
patient_names<-as.data.frame(patient_names)
drug_ori<-drug_response_matrix_MOM
mut_ori<-mutations
sensi<-vector(mode="list", length=10)
Results_list<-vector(mode="list", length=10)
Results_CV_pat<-NULL
kfold<-1
# save(MOM, file = paste(folder_dir,"Rdata/MOM_model.RData",sep=""))
# save(treatmentMOM, file = paste(folder_dir,"Rdata/MOM_results.RData",sep=""))
load(paste(folder_dir,"/MOM_model.RData",sep=""))
load(paste(folder_dir,"/MOM_results.RData",sep=""))
Results_CV_pat<-NULL
kfold<-1
# CV Code-----------------------------------------------------------------------
for(kfold in 1:5){
tic()
cat(sprintf("##### \n \n FOLD %s/5 \n\n######\n\n", kfold))
patient_names_kfold<-as.character(patient_names$patient_names[which(as.numeric(patient_names$kfold)==kfold)])
kfold_validation_drug<-drug_ori[c(patient_names_kfold),]
kfold_validation_mut<-mut_ori[patient_names_kfold,]
drug<-drug_ori[-c(which(rownames(drug_ori) %in% patient_names_kfold)),]
mut<-mut_ori[-c(which(rownames(mut_ori) %in% patient_names_kfold)),]
mut<-mut[,colSums(mut)>0.01*nrow(mut)]
Result<-getBMeffect_F(Mutations = mut, Drug=drug)
output<-Get_Treatment_OptimizationMatrix(BM_Result = Result, Drug = drug, Mutations = mut)
IC50<-output$`IC50*`
PT<-output$PT
P<-nrow(PT)
Treat<-ncol(PT)
S<-4
sol_pat<-MOM_MILP(IC50, PT, S)
MILP_classification<-Extract_results(sol_pat, PT)
Prediction<-CV_Prediction2(MILP_classification = MILP_classification,
kfold_validation_drug = kfold_validation_drug,
kfold_validation_mut = kfold_validation_mut )
Prediction$Fold<-kfold
Results_CV_pat<-rbind(Results_CV_pat, Prediction)
toc()
}
# save(MOM, file = paste(folder_dir,"Rdata/MOM_model.RData",sep=""))
# save(treatmentMOM, file = paste(folder_dir,"Rdata/MOM_results.RData",sep=""))
load(paste(folder_dir,"/MOM_model.RData",sep=""))
load(paste(folder_dir,"/MOM_results.RData",sep=""))
### COMPARISON AGAINST ORACLE---------------------------------------------------
drug<-drug_ori-min(drug_ori)
ORACLE<- apply(drug, 1, which.min)
identical(names(ORACLE), rownames(drug))
ORACLE<-as.data.frame(ORACLE)
ORACLE$Drug<-colnames(drug)[ORACLE[,1]]
ORACLE$Patient<-rownames(ORACLE)
aux<-apply(ORACLE, 1, FUN=function(X){return(IC50<-drug[X[3], X[2]])})
ORACLE$IC50<-aux[rownames(ORACLE)]
MOM<-Results_CV_pat
MOM$IC50<-MOM$IC50-min(drug_ori)
boxplot(ORACLE$IC50, MOM$IC50, names = c("ORACLE", "MOM"), ylab="IC50*", ylim=c(0,5))
ORACLE_plot<-data.frame(Treatment=ORACLE$Drug,
IC50=ORACLE$IC50,
#Pat_name=ORACLE$Patient,
Method="ORACLE",
Fold=NA)
ORACLE_plot<-rbind(ORACLE_plot,cbind(MOM, Method="MOM"))
ggplot(ORACLE_plot, aes(x=Method, y=IC50, fill=Method))+geom_boxplot()+theme_bw()+ylim(0,5)+ylab("IC50*")
MOM$DeltaIC50<-abs(MOM$IC50-ORACLE$IC50[na.omit(match(ORACLE$Patient,MOM$Pat_name))])
MOM$Score<-median(MOM$DeltaIC50)
# save(MOM_All, file = paste(folder_dir,"Rdata/MOM_model_all.RData",sep=""))
# save(treatmentMOM_w34, file = paste(folder_dir,"Rdata/MOM_results_test.RData",sep=""))
load(paste(folder_dir,"/MOM_model_all.RData",sep=""))
load(paste(folder_dir,"/MOM_results_test.RData",sep=""))
drug<-drug_ori-min(drug_response_w34)
ORACLE<- apply(drug, 1, which.min)
identical(names(ORACLE), rownames(drug))
ORACLE<-as.data.frame(ORACLE)
ORACLE$Drug<-colnames(drug)[ORACLE[,1]]
ORACLE$Patient<-rownames(ORACLE)
aux<-apply(ORACLE, 1, FUN=function(X){return(IC50<-drug[X[3], X[2]])})
ORACLE$IC50<-aux[rownames(ORACLE)]
MOM<-MOM_w34
MOM$IC50<-MOM$IC50-min(drug_ori)
boxplot(ORACLE$IC50, MOM$IC50, names = c("ORACLE", "MOM"), ylab="IC50*", ylim=c(0,5))
ORACLE_plot<-data.frame(Treatment=ORACLE$Drug,
IC50=ORACLE$IC50,
#Pat_name=ORACLE$Patient,
Method="ORACLE")
ORACLE_plot<-rbind(ORACLE_plot,cbind(MOM, Method="MOM"))
ggplot(ORACLE_plot, aes(x=Method, y=IC50, fill=Method))+geom_boxplot()+theme_bw()+ylim(0,5)+ylab("IC50*")
# save(MOM_All, file = paste(folder_dir,"Rdata/MOM_model_all.RData",sep=""))
# save(treatmentMOM_w34, file = paste(folder_dir,"Rdata/MOM_results_test.RData",sep=""))
load(paste(folder_dir,"/MOM_model_all.RData",sep=""))
load(paste(folder_dir,"/MOM_results_test.RData",sep=""))
drug<-drug_ori-min(drug_response_w34)
ORACLE<- apply(drug, 1, which.min)
identical(names(ORACLE), rownames(drug))
ORACLE<-as.data.frame(ORACLE)
ORACLE$Drug<-colnames(drug)[ORACLE[,1]]
ORACLE$Patient<-rownames(ORACLE)
aux<-apply(ORACLE, 1, FUN=function(X){return(IC50<-drug[X[3], X[2]])})
ORACLE$IC50<-aux[rownames(ORACLE)]
MOM<-MOM_w34
MOM$IC50<-MOM$IC50-min(drug_ori)
boxplot(ORACLE$IC50, MOM$IC50, names = c("ORACLE", "MOM"), ylab="IC50*", ylim=c(0,5))
MOM$IC50
# save(MOM_All, file = paste(folder_dir,"Rdata/MOM_model_all.RData",sep=""))
# save(treatmentMOM_w34, file = paste(folder_dir,"Rdata/MOM_results_test.RData",sep=""))
load(paste(folder_dir,"/MOM_model_all.RData",sep=""))
# save(MOM, file = paste(folder_dir,"Rdata/MOM_model.RData",sep=""))
# save(treatmentMOM, file = paste(folder_dir,"Rdata/MOM_results.RData",sep=""))
load(paste(folder_dir,"/MOM_model.RData",sep=""))
load(paste(folder_dir,"/MOM_results.RData",sep=""))
### COMPARISON AGAINST ORACLE---------------------------------------------------
drug<-drug_ori-min(drug_ori)
ORACLE<- apply(drug, 1, which.min)
identical(names(ORACLE), rownames(drug))
ORACLE<-as.data.frame(ORACLE)
ORACLE$Drug<-colnames(drug)[ORACLE[,1]]
ORACLE$Patient<-rownames(ORACLE)
aux<-apply(ORACLE, 1, FUN=function(X){return(IC50<-drug[X[3], X[2]])})
ORACLE$IC50<-aux[rownames(ORACLE)]
MOM<-Results_CV_pat
MOM$IC50<-MOM$IC50-min(drug_ori)
boxplot(ORACLE$IC50, MOM$IC50, names = c("ORACLE", "MOM"), ylab="IC50*", ylim=c(0,5))
drug
ORACLE<- apply(drug, 1, which.min)
identical(names(ORACLE), rownames(drug))
ORACLE<-as.data.frame(ORACLE)
ORACLE$Drug<-colnames(drug)[ORACLE[,1]]
ORACLE$Patient<-rownames(ORACLE)
aux<-apply(ORACLE, 1, FUN=function(X){return(IC50<-drug[X[3], X[2]])})
ORACLE$IC50<-aux[rownames(ORACLE)]
Results_CV_pat
MOM<-treatmentMOM
MOM$IC50<-MOM$IC50-min(drug_ori)
boxplot(ORACLE$IC50, MOM$IC50, names = c("ORACLE", "MOM"), ylab="IC50*", ylim=c(0,5))
MOM$IC50
drug_ori
MOM<-treatmentMOM
MOM$IC50<-MOM$IC50-min(drug_ori)
boxplot(ORACLE$IC50, MOM$IC50, names = c("ORACLE", "MOM"), ylab="IC50*", ylim=c(0,5))
MOM$IC50
ORACLE_plot<-data.frame(Treatment=ORACLE$Drug,
IC50=ORACLE$IC50,
#Pat_name=ORACLE$Patient,
Method="ORACLE",
Fold=NA)
ORACLE_plot<-rbind(ORACLE_plot,cbind(MOM, Method="MOM"))
ggplot(ORACLE_plot, aes(x=Method, y=IC50, fill=Method))+geom_boxplot()+theme_bw()+ylim(0,5)+ylab("IC50*")
MOM
# save(MOM_All, file = paste(folder_dir,"Rdata/MOM_model_all.RData",sep=""))
# save(treatmentMOM_w34, file = paste(folder_dir,"Rdata/MOM_results_test.RData",sep=""))
load(paste(folder_dir,"/MOM_model_all.RData",sep=""))
load(paste(folder_dir,"/MOM_results_test.RData",sep=""))
drug<-drug_ori-min(drug_response_w34)
ORACLE<- apply(drug, 1, which.min)
identical(names(ORACLE), rownames(drug))
ORACLE<-as.data.frame(ORACLE)
ORACLE$Drug<-colnames(drug)[ORACLE[,1]]
ORACLE$Patient<-rownames(ORACLE)
aux<-apply(ORACLE, 1, FUN=function(X){return(IC50<-drug[X[3], X[2]])})
ORACLE$IC50<-aux[rownames(ORACLE)]
MOM<-MOM_w34
MOM$IC50<-MOM$IC50-min(drug_ori)
boxplot(ORACLE$IC50, MOM$IC50, names = c("ORACLE", "MOM"), ylab="IC50*", ylim=c(0,5))
MOM_w34
# save(MOM_All, file = paste(folder_dir,"Rdata/MOM_model_all.RData",sep=""))
# save(treatmentMOM_w34, file = paste(folder_dir,"Rdata/MOM_results_test.RData",sep=""))
load(paste(folder_dir,"/MOM_model_all.RData",sep=""))
load(paste(folder_dir,"/MOM_results_test.RData",sep=""))
drug<-drug_ori-min(drug_response_w34)
ORACLE<- apply(drug, 1, which.min)
identical(names(ORACLE), rownames(drug))
ORACLE<-as.data.frame(ORACLE)
ORACLE$Drug<-colnames(drug)[ORACLE[,1]]
ORACLE$Patient<-rownames(ORACLE)
aux<-apply(ORACLE, 1, FUN=function(X){return(IC50<-drug[X[3], X[2]])})
ORACLE$IC50<-aux[rownames(ORACLE)]
MOM<-treatmentMOM_w34
MOM$IC50<-MOM$IC50-min(drug_ori)
boxplot(ORACLE$IC50, MOM$IC50, names = c("ORACLE", "MOM"), ylab="IC50*", ylim=c(0,5))
MOM$IC50
ORACLE$IC50
boxplot(ORACLE$IC50, MOM$IC50)
# save(MOM, file = paste(folder_dir,"Rdata/MOM_model.RData",sep=""))
# save(treatmentMOM, file = paste(folder_dir,"Rdata/MOM_results.RData",sep=""))
load(paste(folder_dir,"/MOM_model.RData",sep=""))
load(paste(folder_dir,"/MOM_results.RData",sep=""))
### COMPARISON AGAINST ORACLE---------------------------------------------------
drug<-drug_ori-min(drug_ori)
ORACLE<- apply(drug, 1, which.min)
identical(names(ORACLE), rownames(drug))
ORACLE<-as.data.frame(ORACLE)
ORACLE$Drug<-colnames(drug)[ORACLE[,1]]
ORACLE$Patient<-rownames(ORACLE)
aux<-apply(ORACLE, 1, FUN=function(X){return(IC50<-drug[X[3], X[2]])})
ORACLE$IC50<-aux[rownames(ORACLE)]
MOM<-treatmentMOM
MOM$IC50<-MOM$IC50-min(drug_ori)
boxplot(ORACLE$IC50, MOM$IC50, names = c("ORACLE", "MOM"), ylab="IC50*")
ORACLE_plot<-data.frame(Treatment=ORACLE$Drug,
IC50=ORACLE$IC50,
#Pat_name=ORACLE$Patient,
Method="ORACLE",
Fold=NA)
ORACLE_plot<-rbind(ORACLE_plot,cbind(MOM, Method="MOM"))
ggplot(ORACLE_plot, aes(x=Method, y=IC50, fill=Method))+geom_boxplot()+theme_bw()+ylab("IC50*")
MOM$DeltaIC50<-abs(MOM$IC50-ORACLE$IC50[na.omit(match(ORACLE$Patient,MOM$Pat_name))])
MOM$Score<-median(MOM$DeltaIC50)
# Train the model with all the data---------------------------------------------
tic()
# save(MOM_All, file = paste(folder_dir,"Rdata/MOM_model_all.RData",sep=""))
# save(treatmentMOM_w34, file = paste(folder_dir,"Rdata/MOM_results_test.RData",sep=""))
load(paste(folder_dir,"/MOM_model_all.RData",sep=""))
load(paste(folder_dir,"/MOM_results_test.RData",sep=""))
drug<-drug_ori-min(drug_response_w34)
ORACLE<- apply(drug, 1, which.min)
identical(names(ORACLE), rownames(drug))
ORACLE<-as.data.frame(ORACLE)
ORACLE$Drug<-colnames(drug)[ORACLE[,1]]
ORACLE$Patient<-rownames(ORACLE)
aux<-apply(ORACLE, 1, FUN=function(X){return(IC50<-drug[X[3], X[2]])})
ORACLE$IC50<-aux[rownames(ORACLE)]
MOM<-treatmentMOM_w34
MOM$IC50<-MOM$IC50-min(drug_ori)
boxplot(ORACLE$IC50, MOM$IC50, names = c("ORACLE", "MOM"), ylab="IC50*")
ORACLE_plot<-data.frame(Treatment=ORACLE$Drug,
IC50=ORACLE$IC50,
#Pat_name=ORACLE$Patient,
Method="ORACLE")
ORACLE_plot<-rbind(ORACLE_plot,cbind(MOM, Method="MOM"))
ggplot(ORACLE_plot, aes(x=Method, y=IC50, fill=Method))+geom_boxplot()+theme_bw()+ylim(0,5)+ylab("IC50*")
ORACLE_plot<-rbind(ORACLE_plot,cbind(MOM, Method="MOM"))
ggplot(ORACLE_plot, aes(x=Method, y=IC50, fill=Method))+geom_boxplot()+theme_bw()+ylab("IC50*")
MOM$DeltaIC50<-abs(MOM$IC50-ORACLE$IC50[na.omit(match(ORACLE$Patient,MOM$Pat_name))])
MOM$Score<-median(MOM$DeltaIC50)
